#!/bin/bash
#
# Copyright (C) 2014 Wenva <lvyexuwenfa100@126.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

spushd() {
     pushd "$1" 2>&1> /dev/null
}

spopd() {
     popd 2>&1> /dev/null
}

info() {
     local green="\033[1;32m"
     local normal="\033[0m"
     echo -e "[${green}INFO${normal}] $1"
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

# 获取当前目录
current_dir() {
    if [ ${0:0:1} = '/' ] || [ ${0:0:1} = '~' ]; then
        echo "$(dirname $0)"
    else
        echo "`pwd`/$(dirname $0)"
    fi
}

MINPORT=1
MAXPORT=9999
RPORT_OFFSET=30000 # reverse port offset on cloud
AUTOSSH_PORT_OFFSET=40000 # autossh listen port offset

usage() {
cat << EOF

USAGE: $0 [-h] port($MINPORT - $MAXPORT)

DESCRIPTION:

Revert local port to cloud to enable remote access.
Notes: this script depends on the follow environment variable.

    SSH_SERVER_DOMAIN
    SSH_SERVER_USER
    SSH_SERVER_PORT

OPTIONS:
    -h                Show this help message and exit

EOF
exit
}

while getopts 'h' arg; do
    case $arg in
        h)
            usage;;
        ?)
            usage;;
    esac
done

shift $(($OPTIND - 1))

# check env
ssh_server_domain=$SSH_SERVER_DOMAIN
ssh_server_user=$SSH_SERVER_USER
ssh_server_port=$SSH_SERVER_PORT

[ -z "$ssh_server_domain" ] && usage
[ -z "$ssh_server_user" ] && ssh_server_user=root
[ -z "$ssh_server_port" ] && ssh_server_port=22

# check param
[ $# != 1 ] && usage
port=$1
`expr $port + 1 >/dev/null 2>&1`
[ $? -ne 0 ] && usage
[ $port -lt $MINPORT -o $port -gt $MAXPORT ] && usage
rport=`expr $port + $RPORT_OFFSET`

function create_service() {
port=$1
cat << EOF > /lib/systemd/system/r-$port.service
[Unit]
Description=r-$port
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=`who am i|awk '{print $1}'`
EnvironmentFile=/etc/default/r-$port
ExecStart=
ExecStart=/usr/bin/autossh \$SSH_OPTIONS
Restart=always
RestartSec=60

[Install]
WantedBy=multi-user.target
EOF
}

function create_config() {
port=$1
user=`who am i|awk '{print $1}'`
home=$HOME
[ "$user" != "root" ] && home=/home/$user
cat << EOF > /etc/default/r-$port
UTOSSH_POLL=60
AUTOSSH_FIRST_POLL=30
AUTOSSH_GATETIME=0
AUTOSSH_PORT=`expr $port + $AUTOSSH_PORT_OFFSET`
SSH_OPTIONS="-p $ssh_server_port -N -R $rport:localhost:$port $ssh_server_user@$ssh_server_domain -i $home/.ssh/id_rsa"
EOF
}

create_service $port
create_config $port

systemctl daemon-reload
systemctl enable r-$port

info "Successed! reverse port $rport"


